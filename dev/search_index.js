var documenterSearchIndex = {"docs":
[{"location":"lib/UEG/#UEG-parameters","page":"Parameter","title":"UEG parameters","text":"","category":"section"},{"location":"lib/UEG/","page":"Parameter","title":"Parameter","text":"This module provides the parameter struct for the uniform electron gas problem.","category":"page"},{"location":"lib/UEG/","page":"Parameter","title":"Parameter","text":"Modules = [ElectronLiquid.UEG]","category":"page"},{"location":"lib/UEG/#ElectronLiquid.UEG.short_paratypes","page":"Parameter","title":"ElectronLiquid.UEG.short_paratypes","text":"Mapping from ParaMC fields saved in short format to their corresponding types\n\n\n\n\n\n","category":"constant"},{"location":"lib/UEG/#ElectronLiquid.UEG.ParaMC-Tuple{String}","page":"Parameter","title":"ElectronLiquid.UEG.ParaMC","text":"Constructs a ParaMC object from its short string representation.\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.KO_W-Tuple{Any, Integer, ParaMC}","page":"Parameter","title":"ElectronLiquid.UEG.KO_W","text":"function KO_W(q, n, p::ParaMC)\n\nKO interaction in momentum q and the Matsubara frequency index n Assume\n\nr_q = v_q + f\n\nthen the KO interaction is\n\nRq = r_q  (1 - r_q Π0) - f\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.KOdynamic_T-Tuple{ParaMC}","page":"Parameter","title":"ElectronLiquid.UEG.KOdynamic_T","text":"function KOdynamic_T(para::ParaMC)\n\nDynamic part of the interaction.\n\nAssume \n\nr_q = v_q + f\n\nThen, the dynamic interaction is given by\n\nδR_qr_q = r_q Π₀(1-r_q Π₀)\n\nwhere Π₀ is the polarization of free electrons.\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.KOdynamic_T_df-Tuple{ParaMC}","page":"Parameter","title":"ElectronLiquid.UEG.KOdynamic_T_df","text":"function KOdynamic_T(para::ParaMC)\n\nDynamic part of the interaction.\n\nAssume \n\nr_q = v_q + f\n\nThen, the dynamic interaction is given by\n\nd δR_qdf - 1 = 1(1-r_q Π₀)^2 - 1\n\nwhere Π₀ is the polarization of free electrons.\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.counterKO_W-Tuple{ParaMC}","page":"Parameter","title":"ElectronLiquid.UEG.counterKO_W","text":"function counterKO_W(para::ParaMC; qgrid=para.qgrid, ngrid=[0,], order=para.order, proper=false)\n\ncalculate counter-terms of the KO interaction\n\nAssume\n\nr_q = v_q + f\n\nand\n\nRq = r_q  (1 - r_q Π0) - f\n\nThen, the counter-term is given by a power expansion of the form\n\n(Rq ξ + f(ξ))(1+(Rq ξ + f(ξ))Π0) - f(ξ)\n\nwhere f(ξ) = f1 ξ + f2 ξ^2 + ...\n\nTherefore, the counter-term is given by Order 1 (ξ^2)\n\n(Rq+f1)^2 Π0\n\nOrder 2 (ξ^3)\n\n(Rq+f1)^3 Π0^2 + (R_q+f1)f2 Π_0\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.interactionDynamic-Tuple{ParaMC, Any, Any, Any}","page":"Parameter","title":"ElectronLiquid.UEG.interactionDynamic","text":"function interactionDynamic(p::ParaMC, qd, τIn, τOut)\n\nDynamic part of the interaction.\n\nAssume \n\nr_q = v_q + f\n\nThen, the dynamic interaction is given by\n\nδR_q = (r_q)²Π₀(1-r_q Π₀)\n\nwhere Π₀ is the polarization of free electrons.\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.interactionDynamic_df-Tuple{ParaMC, Any, Any, Any}","page":"Parameter","title":"ElectronLiquid.UEG.interactionDynamic_df","text":"function interactionDynamic_df(p::ParaMC, qd, τIn, τOut)\n\nDynamic part of the interaction.\n\nAssume \n\nr_q = v_q + f\n\nThen, the dynamic interaction is given by\n\nd δR_qdf = (r_q)²Π₀(1-r_q Π₀)\n\nwhere Π₀ is the polarization of free electrons.\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.interactionStatic-Tuple{ParaMC, Any, Any, Any}","page":"Parameter","title":"ElectronLiquid.UEG.interactionStatic","text":"function interactionStatic(p::ParaMC, qd, τIn, τOut)\n\ninstant part of the renormalized interaction\n\nAssume \n\nr_q = v_q + f\n\nThen, the instant interaction is given by \n\nv_q = r_q - f\n\nThe current implementation involves one auxiliary time variable τOut for better sign cancellation.\n\nTo show the net result is v_q, one may perform a τOut integration explicitly, then\n\nkostatic = r_q  (1-r_q Π₀) - f\n\nwhere Π₀ is the polarization of free electrons. and,\n\ndynamic =  (r_q)²Π₀(1-r_q Π₀)\n\nso that,\n\nkostatic - dynamic = v_q\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.lindhard-Tuple{Any, Any}","page":"Parameter","title":"ElectronLiquid.UEG.lindhard","text":"function lindhard(x)\n\nDimensionless Linhard function so that lindhard(0) = 1 for both 2D and 3D\n\nArguments\n\nx : 2k/k_F\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.linear2D-NTuple{5, Any}","page":"Parameter","title":"ElectronLiquid.UEG.linear2D","text":"linear2D(data, xgrid, ygrid, x, y) \n\nlinear interpolation of data(x, y)\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\nygrid: one-dimensional grid of y\ndata: two-dimensional array of data\nx: x\ny: y\n\n\n\n\n\n","category":"method"},{"location":"lib/UEG/#ElectronLiquid.UEG.partition-Tuple{Int64}","page":"Parameter","title":"ElectronLiquid.UEG.partition","text":"Hard-coded counterterm partitions for diagrams of max order order and minimal loop order offset, given in the form (nloop, nμ, n_λ). The default offset corresponds to partitions of the self-energy, where the minimal loop order is 1.\n\n\n\n\n\n","category":"method"},{"location":"lib/CounterTerm/#CounterTerm","page":"CounterTerm","title":"CounterTerm","text":"","category":"section"},{"location":"lib/CounterTerm/","page":"CounterTerm","title":"CounterTerm","text":"This module provides the functions to manipulate counterterms.","category":"page"},{"location":"lib/CounterTerm/","page":"CounterTerm","title":"CounterTerm","text":"Modules = [ElectronLiquid.CounterTerm]","category":"page"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.chemicalpotential_renormalization-Tuple{Any, Any, Any}","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.chemicalpotential_renormalization","text":"function chemicalpotential_renormalization(order, data, δμ)\n\nmerge different diagrammatic orders with proper chemical potential renormalization\n\nBy definition, the chemical potential renormalization is defined as Σ1 = Σ11 Σ2 = Σ20+Σ11δμ1 Σ3 = Σ30+Σ11δμ2+Σ12δμ1^2+Σ21δμ1 Σ4 = Σ40+Σ11δμ3+Σ12(2δμ1δμ2)+Σ13δμ1^3+Σ21δμ2+Σ22δμ1^2+Σ31δμ1\n\nArguments\n\norder : total order\ndata  : Dict{OrderTuple, ActualData}, where OrderTuple is a tuple of two integer Tuple{NormalOrder+WOrder, GOrder}\nδμ    : chemical potential renormalization for each order\n\n\n\n\n\n","category":"method"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.fromFile","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.fromFile","text":"function fromFile(parafile=parafileName; root_dir=@__DIR__)\n\nLoads self-energy counterterm data from a CSV file parafile and returns a DataFrame.\n\nArguments\n\nparafile : name of the CSV file to load from\nroot_dir : the root directory of parafile (default: <ElectronLiquid_Root>/common/)\nverbose  : verbosity level (0: no output to stdout, 1 (default): print to stdout)\n\n\n\n\n\n","category":"function"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.getSigma-Tuple{ParaMC}","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.getSigma","text":"function getSigma(para::ParaMC; order=para.order, parafile=parafileName)\n\nDerives the counterterms mu and sw from self-energy data stored in the CSV file parafile.\n\nArguments\n\npara   : the physical parameter set to load data for\norder  : the maximum simulation order\nparafile : name of the CSV file to load from\nroot_dir : the root directory of parafile (default: <ElectronLiquid_Root>/common/)\n\n\n\n\n\n","category":"method"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.mergeInteraction-Tuple{Any}","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.mergeInteraction","text":"Merge interaction order and the main order (normalorder, Gorder, Worder) –> (normal+Worder, G_order)\n\n\n\n\n\n","category":"method"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.partition-Tuple{Int64}","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.partition","text":"Hard-coded counterterm partitions for the self-energy in the form (nloop, nμ, n_λ).\n\n\n\n\n\n","category":"method"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.renormalization","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.renormalization","text":"function renormalization(order, data, δμ, δz=nothing; nbody=1, zrenorm=true)\n\nFirst perform the chemical potential renormalization, then perform the z-factor renormalization\n\nArguments\n\norder : total order\ndata  : Dict{OrderTuple, ActualData}, where OrderTuple is a tuple of two integer Tuple{NormalOrder+WOrder, GOrder}\nδμ    : chemical potential counterterm\nδz    : z-factor counterterm\n\nzrenorm : turn on or off the z-factor renormalization nbody : nbody=1 for the one-body vertex function (self-energy, or Γ3) and nbody=2 for the two-body vertex function\n\n\n\n\n\n","category":"function"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.sigmaCT","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.sigmaCT","text":"function sigmaCT(order, μ, sw=Dict(key => 0.0 for key in keys(μ)); isfock=false)\n\nDerive the chemicalpotential and z-factor counterterm for each order from the self-energy.\n\nArguments\n\norder : total order\nμ     : ReΣ(kF, w=0),     Dict{OrderTuple, ActualData}, where OrderTuple is a tuple of two integer Tuple{NormalOrder+WOrder, GOrder}, or three integer Tuple{NormalOrder, WOrder, G_Order}\nsw    : dImΣ(kF, w=0)/dw, Dict{OrderTuple, ActualData}, where OrderTuple is a tuple of two integer Tuple{NormalOrder+WOrder, GOrder}, or three integer Tuple{NormalOrder, WOrder, G_Order}\nisfock: if true (false) Fock renormalization is turned on (off)\nverbose: verbosity level (0 (default): no output to stdout, 1: print to stdout)\n\nReturn (δzi, δμ, δz)\n\nThe convention is the following:\n\nδzi : 1/z = 1+δzi1+δzi2+... \nδμ  : chemicalpotentialshiftwithoutzrenormalization = δμ1+δμ_2+...\nδz  : z = 1+δz1+δz2+...\n\nRemark:\n\nThe chemical potential shift is the chemical potential shift without z-renormalization.\n\n\n\n\n\n","category":"function"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.toFile","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.toFile","text":"function fromFile(parafile=parafileName; root_dir=@__DIR__)\n\nSaves self-energy counterterm data specified by a DataFrame df to a CSV file parafile.\n\nArguments\n\ndf       : DataFrame containing the self-energy counterterm data\nparafile : name of the CSV file to save to\nroot_dir : the root directory of parafile (default: <ElectronLiquid_Root>/common/)\nverbose  : verbosity level (0: no output to stdout, 1 (default): print to stdout)\n\n\n\n\n\n","category":"function"},{"location":"lib/CounterTerm/#ElectronLiquid.CounterTerm.z_renormalization-Tuple{Any, Any, Any, Int64}","page":"CounterTerm","title":"ElectronLiquid.CounterTerm.z_renormalization","text":"function z_renormalization(order, data, δz, nbody::Int)\n\nBy defintion, z=1+δz1+δz2+...\n\nThen the z-factor renormalization resuffles the power series in the following way:\n\nFor the one-body vertex function  DR = zD ==> (D1+D2+D3+D4+...)(1+δz1+δz2+δz3+...) = D1 + (D2+D1δz1) + (D3+D2δz1+D1δz2) + (D4+D3δz1+D2δz2+D1δz3) + ...\nFor the two-body vertex function  DR = z^2D ==> (D1+D2+D3+D4+...)(1+δz1+δz2+δz3+...)^2 = D1 + (D2+2D1δz1) + (D3+2D2δz1+D1(δz1^2+2δz2) + (D4+2D3δz1+D2(δz1^2+δz2)+2D1(δz1δz2+δz3)) + ...\n\nNote that the z-factor renormalization doesn't alter the W-order and the G-order, therefore, D{m,n,k} renormalizes just as D{m}.\n\nArguments\n\norder : total order\ndata  : Vector of data, or Dict{OrderTuple, ActualData}, where OrderTuple is a tuple of two integer Tuple{NormalOrder+WOrder, GOrder} or three integer Tuple{NormalOrder, GOrder, W_Order}\nδz    : z-factor renormalization for each order\nnbody : nbody=1 for the one-body vertex function (self-energy, or Γ3) and nbody=2 for the two-body vertex function\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ElectronLiquid","category":"page"},{"location":"#ElectronLiquid","page":"Home","title":"ElectronLiquid","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ElectronLiquid.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ElectronLiquid]","category":"page"}]
}
